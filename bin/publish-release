#! /bin/sh
set -e

# Publishing a release is a bit more complicated than publishing a daily. We
# have two trees: simple and full. The simple tree is intended for smaller
# mirrors and for ease of use by naÃ¯ve end users. It contains a pool of
# images (hardlinks into the full tree) and a tree per release of symlinks
# into that pool with filenames that include the status of the image (e.g.
# preview, sounder9, release).
#
# The full tree contains everything except the releases that are in the
# simple tree (so in practice it contains alpha/beta releases), and has a
# more complicated structure that ordinary users ultimately shouldn't have
# to pay too much attention to.
#
# Releases are always published based on a daily build. Nominate the version
# number.

export CDIMAGE_ROOT=/srv/cdimage.no-name-yet.com
. "$CDIMAGE_ROOT/etc/config"
. "$CDIMAGE_ROOT/bin/functions.sh"

if [ -z "$1" ] || [ -z "$2" ]; then
	echo 'Usage: publish-release DAILY-SOURCE DAILY-DATE TYPE OFFICIAL [STATUS]' >&2
	echo 'OFFICIAL=yes to publish to releases.ubuntu.com, poolonly to pre-publish,' >&2
	echo 'otherwise no.' >&2
	exit 1
fi

SOURCE="$1"
DATE="$2"
TYPE="$3"
OFFICIAL="$4"
STATUS="$5"

case $PROJECT in
	ubuntu)
		SIMPLE_TREE=simple
		FULL_TREE=full
		TORRENT_TREE=torrent
		;;
	*)
		SIMPLE_TREE="simple/$PROJECT"
		FULL_TREE="full/$PROJECT"
		TORRENT_TREE="torrent/$PROJECT"
		;;
esac

case $OFFICIAL in
	yes)
		PUBLISH_DIST=:
		PUBLISH_POOL=:
		PUBLISH_FULL=false
		;;
	poolonly)
		PUBLISH_DIST=false
		PUBLISH_POOL=:
		PUBLISH_FULL=false
		;;
	no)
		PUBLISH_DIST=false
		PUBLISH_POOL=false
		PUBLISH_FULL=:
		;;
esac
# Just to make sure ...
if $PUBLISH_DIST; then
	PUBLISH_POOL=:
fi

DAILY="$CDIMAGE_ROOT/www/$FULL_TREE/$SOURCE/$DATE"
RELEASE_FULL="$CDIMAGE_ROOT/www/$FULL_TREE/releases/$DIST/${STATUS:-release}"
RELEASE_SIMPLE_POOL="$CDIMAGE_ROOT/www/$SIMPLE_TREE/.pool"
RELEASE_SIMPLE_DIST="$CDIMAGE_ROOT/www/$SIMPLE_TREE/$DIST"

# Sanity-check.
for arch in $ARCHES; do
	if [ ! -e "$DAILY/$DIST-$TYPE-$arch.iso" ]; then
		echo "No daily for $DIST $arch on $DATE!" >&2
		exit 1
	fi
done

if $PUBLISH_POOL; then
	mkdir -p "$RELEASE_SIMPLE_POOL"
fi
if $PUBLISH_DIST; then
	mkdir -p "$RELEASE_SIMPLE_DIST"
	find "$RELEASE_SIMPLE_DIST/" -name "$DIST-$TYPE-*" -type l -print0 | xargs -0r rm -f
fi
if $PUBLISH_FULL; then
	mkdir -p "$RELEASE_FULL"
fi

echo "Constructing release trees ..."

for arch in $ARCHES; do
	echo "Copying $TYPE CDs for $arch ..."

	baseplain="$DIST-$TYPE-$arch"
	basestatus="$DIST-${STATUS:+$STATUS-}$TYPE-$arch"

	if [ ! -e "$DAILY/$baseplain.iso" ]; then
		continue
	fi

	# Copy, to make sure we have a canonical version of this.
	for ext in iso list; do
		if $PUBLISH_POOL; then
			cp -a "$DAILY/$baseplain.$ext" \
			      "$RELEASE_SIMPLE_POOL/$basestatus.$ext"
		fi
		if $PUBLISH_DIST; then
			ln -s "../.pool/$basestatus.$ext" \
			      "$RELEASE_SIMPLE_DIST/$basestatus.$ext"
		fi
		if $PUBLISH_FULL; then
			cp -a "$DAILY/$baseplain.$ext" \
			      "$RELEASE_FULL/$baseplain.$ext"
		fi
	done

	if [ "$TYPE" = install ]; then
		if [ -e "$DAILY/$baseplain.jigdo" ] && \
		   [ -e "$DAILY/$baseplain.template" ]; then
			if $PUBLISH_POOL; then
				cp -a "$DAILY/$baseplain.template" \
					"$RELEASE_SIMPLE_POOL/$basestatus.template"
				sed "s/=$baseplain/=$basestatus/g" \
					< "$DAILY/$baseplain.jigdo" \
					> "$RELEASE_SIMPLE_POOL/$basestatus.jigdo"
			fi
			if $PUBLISH_DIST; then
				for ext in template jigdo; do
					ln -s "../.pool/$basestatus.$ext" \
						"$RELEASE_SIMPLE_DIST/$basestatus.$ext"
				done
			fi
			if $PUBLISH_FULL; then
				for ext in template jigdo; do
					cp -a "$DAILY/$baseplain.$ext" \
						"$RELEASE_FULL/$baseplain.$ext"
				done
			fi
		else
			for ext in jigdo template; do
				if $PUBLISH_POOL; then
					rm -f "$RELEASE_SIMPLE_POOL/$basestatus.$ext"
				fi
				if $PUBLISH_DIST; then
					rm -f "$RELEASE_SIMPLE_DIST/$basestatus.$ext"
				fi
				if $PUBLISH_FULL; then
					rm -f "$RELEASE_FULL/$baseplain.$ext"
				fi
			done
		fi
	fi

	if [ "$TYPE" = live ] || [ "$TYPE" = dvd ]; then
		# Copy, to make sure we have a canonical version of this.
		if $PUBLISH_POOL; then
			cp -a "$DAILY/$baseplain.manifest" \
			      "$RELEASE_SIMPLE_POOL/$basestatus.manifest"
		fi
		if $PUBLISH_DIST; then
			ln -s "../.pool/$basestatus.manifest" \
			      "$RELEASE_SIMPLE_DIST/$basestatus.manifest"
		fi
		if $PUBLISH_FULL; then
			cp -a "$DAILY/$baseplain.manifest" \
			      "$RELEASE_FULL/$baseplain.manifest"
		fi
	fi

	if $PUBLISH_DIST; then
		make-web-indices "$RELEASE_SIMPLE_DIST" "$DIST${STATUS:+-$STATUS}"
	fi
	if $PUBLISH_FULL; then
		make-web-indices "$RELEASE_FULL" "$DIST"
	fi
done

# There can only be one set of images per release in the per-release tree,
# so if we're publishing there then we can now safely clean up previous
# images for that release.
if $PUBLISH_DIST; then
	for dir in "$RELEASE_SIMPLE_DIST" "$RELEASE_SIMPLE_POOL"; do
		for file in "$dir/$DIST"-*; do
			base="${file##*/}"
			base="${base%-*}" # remove architecture
			base="${base%-*}" # remove type
			if [ "$base" = "$DIST${STATUS:+-$STATUS}" ]; then
				# Don't delete what we just published.
				continue
			fi
			echo "Purging $file"
			rm -f "$file"
		done
	done
fi

# Create and publish torrents.
if $PUBLISH_DIST; then
	TORRENTS="$CDIMAGE_ROOT/www/$TORRENT_TREE/simple/$DIST"
	mkemptydir "$TORRENTS"
	make-torrents "$RELEASE_SIMPLE_DIST" releases.ubuntu.com
fi
if $PUBLISH_FULL; then
	mkemptydir "$CDIMAGE_ROOT/www/$TORRENT_TREE/releases/$DIST"
	TORRENTS="$CDIMAGE_ROOT/www/$TORRENT_TREE/releases/$DIST/${STATUS:-release}"
	mkemptydir "$TORRENTS"
	make-torrents "$RELEASE_FULL" cdimage.ubuntu.com
fi
for arch in $ARCHES; do
	if $PUBLISH_DIST; then
		basestatus="$DIST-${STATUS:+$STATUS-}$TYPE-$arch"
		[ -e "$RELEASE_SIMPLE_POOL/$basestatus.iso" ] || continue
		ln -f "$RELEASE_SIMPLE_POOL/$basestatus.iso" \
		      "$TORRENTS/$basestatus.iso"
		ln -f "$RELEASE_SIMPLE_DIST/$basestatus.iso.torrent" \
		      "$TORRENTS/$basestatus.iso.torrent"
	fi
	if $PUBLISH_FULL; then
		baseplain="$DIST-$TYPE-$arch"
		[ -e "$RELEASE_FULL/$baseplain.iso" ] || continue
		ln -f "$RELEASE_FULL/$baseplain.iso" \
		      "$TORRENTS/$baseplain.iso"
		ln -f "$RELEASE_FULL/$baseplain.iso.torrent" \
		      "$TORRENTS/$baseplain.iso.torrent"
	fi
done

md5sum_directory () {
	echo "MD5summing $1 ..."
	(cd "$2"
	 if [ -f MD5SUMS ]; then grep -v "  $3-" MD5SUMS || true; fi
	 md5sum "$3"-*.iso) | sort -k2 > "$2/MD5SUMS.new"
	mv "$2/MD5SUMS.new" "$2/MD5SUMS"
	sign-cdimage "$2/MD5SUMS"
}

if $PUBLISH_POOL; then
	md5sum_directory 'simple tree (pool)' "$RELEASE_SIMPLE_POOL" \
		"$DIST-${STATUS:+$STATUS-}$TYPE"
fi
if $PUBLISH_DIST; then
	md5sum_directory "simple tree ($DIST)" "$RELEASE_SIMPLE_DIST" \
		"$DIST-${STATUS:+$STATUS-}$TYPE"
fi
if $PUBLISH_FULL; then
	md5sum_directory 'full tree' "$RELEASE_FULL" "$DIST-$TYPE"
fi

echo "Done! Remember to sync-mirrors after checking that everything is OK."
