#! /bin/sh
set -e

export CDIMAGE_ROOT=/srv/cdimage.no-name-yet.com
. "$CDIMAGE_ROOT/etc/config"

if ! lockfile -l 7200 -r 0 "$CDIMAGE_ROOT/etc/.lock-build-image-set-$PROJECT"; then
	echo "Another image set is already building!" >&2
	exit 1
fi
trap "rm -f $CDIMAGE_ROOT/etc/.lock-build-image-set-$PROJECT" EXIT HUP INT QUIT TERM

SEM="$CDIMAGE_ROOT/etc/.sem-build-image-set"
# Set up a counting semaphore for parallel builds.
if ! SEM_STATE="$(semaphore test-increment "$SEM")"; then
	# semaphore failed, something went badly wrong
	exit 1
fi

IMAGE_TYPE="${1:-daily}"
DATE="$(next-build-date "$IMAGE_TYPE")"

export PROJECT CAPPROJECT DIST ARCHES

if [ "$CDIMAGE_INSTALL" ]; then
	export CDIMAGE_INSTALL_BASE=1
fi

if [ -z "$DEBUG" ]; then
	exec >"$CDIMAGE_ROOT/log/$PROJECT-$IMAGE_TYPE-$DATE.log" 2>&1
	# Since we now know we aren't going to be spamming the terminal,
	# it's safe to crank up the verbosity so that the logs are most
	# useful.
	export VERBOSE=3
fi

if [ -z "$CDIMAGE_NOSYNC" ]; then
	SYNC_LOCK="$CDIMAGE_ROOT/etc/.lock-archive-sync"
	if [ "$SEM_STATE" = 0 ]; then
		echo "===== Syncing $CAPPROJECT mirror ====="
		date
		# Acquire lock to allow parallel builds to ensure a
		# consistent archive.
		if ! lockfile -r 4 "$SYNC_LOCK"; then
			echo "Couldn't acquire archive sync lock!" >&2
			exit 1
		fi
		# A trap is already in place, so ensure lock removal by hand.
		# TODO: very ugly - refactor?
		set +e
		CODE=0
		anonftpsync || CODE="$?"
		if [ "$CODE" ]; then
			rm -f "$SYNC_LOCK"
			exit "$CODE"
		fi
		ARCHES_COLONS="$(echo "$ARCHES" | tr ' ' ':')"
		case :$ARCHES_COLONS: in
			*:hppa:*|*:ia64:*|*:sparc:*)
				ANONFTPSYNC_CONF="$CDIMAGE_ROOT/etc/anonftpsync.ports" anonftpsync || CODE="$?"
				if [ "$CODE" ]; then
					rm -f "$SYNC_LOCK"
					exit "$CODE"
				fi
				;;
		esac
	else
		echo "===== Parallel build; waiting for $CAPPROJECT mirror to sync ====="
		if ! lockfile -8 -r 450 "$SYNC_LOCK"; then
			echo "Timed out waiting for archive sync lock!" >&2
			exit 1
		fi
		rm -f "$SYNC_LOCK"
	fi
fi

echo "===== Updating archive of local packages ====="
date
update-local-indices

echo "===== Extracting debootstrap scripts ====="
date
extract-debootstrap

echo "===== Germinating ====="
date
run-germinate

echo "===== Generating new task lists ====="
date
germinate-to-tasks "$IMAGE_TYPE"

echo "===== Checking for other task changes ====="
date
update-tasks "$DATE" "$IMAGE_TYPE"

if [ "$CDIMAGE_LIVE" ]; then
	echo "===== Downloading live filesystem images ====="
	date
	download-live-filesystems
fi

if [ -z "$SPLASHRLE" ]; then
	if [ -e "$CDIMAGE_ROOT/debian-cd/data/$DIST/$PROJECT.rle" ]; then
		export SPLASHRLE="$CDIMAGE_ROOT/debian-cd/data/$DIST/$PROJECT.rle"
	else
		export SPLASHRLE="$CDIMAGE_ROOT/debian-cd/data/$DIST/splash.rle"
	fi
fi

echo "===== Building $CAPPROJECT daily CDs ====="
date
cd "$CDIMAGE_ROOT/debian-cd"
./build_all.sh || true

# Kludge to work around permission-handling problems elsewhere.
chmod -R g+rwX "$CDIMAGE_ROOT/scratch" 2>/dev/null || true

# temporarily turned off for live builds
if [ "$CDIMAGE_INSTALL_BASE" ]; then
	echo "===== Producing installability report ====="
	date
	check-installable
fi

if [ -z "$DEBUG" ]; then
	echo "===== Publishing ====="
	date
	publish-daily "$DATE" "$IMAGE_TYPE"

	echo "===== Purging old images ====="
	date
	purge-old-images "$IMAGE_TYPE"

	echo "===== Triggering mirrors ====="
	date
	sync-mirrors
fi

echo "===== Finished ====="
semaphore decrement-test "$SEM"
date
