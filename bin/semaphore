#! /usr/bin/python

# Copyright (C) 2013 Canonical Ltd.
# Author: Colin Watson <cjwatson@ubuntu.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""Atomic counting semaphore files.

This implements two operations, namely test-increment (test non-zero,
increment, return state of test) and decrement-test (decrement, test
non-zero, return state of test), which are sufficient for use as a shared
lock which only opens when all users have unlocked.  It is an error to call
decrement-test on a semaphore that is already zero.

The semaphore state is returned on stdout to allow the exit status to be
used to report errors.
"""

from __future__ import print_function

from optparse import OptionParser
import os
import sys

sys.path.insert(0, os.path.join(sys.path[0], os.pardir, "lib"))
from cdimage.semaphore import Semaphore, SemaphoreError


def main():
    parser = OptionParser("%prog test-increment|decrement-test SEMAPHORE")
    _, args = parser.parse_args()
    if len(args) < 1:
        parser.error("need operation")
    if len(args) < 2:
        parser.error("need semaphore file name")
    mode, path = args[:2]
    semaphore = Semaphore(path)
    try:
        if mode == "test-increment":
            print(semaphore.test_increment())
        elif mode == "decrement-test":
            print(semaphore.decrement_test())
        else:
            parser.error("unknown semaphore operation '%s'" % mode)
    except SemaphoreError as e:
        print(e, file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()
