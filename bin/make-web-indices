#! /bin/sh
set -e

export CDIMAGE_ROOT="${CDIMAGE_ROOT:-/srv/cdimage.ubuntu.com}"
. "$CDIMAGE_ROOT/etc/config"

if [ -z "$1" ] || [ -z "$2" ]; then
	echo 'Usage: make-web-indices DIR CDPREFIX [STATUS]' >&2
	echo 'STATUS=daily for daily builds, release for release builds;' >&2
	echo 'default is release.' >&2
	exit 1
fi

DIR="$1"
CDPREFIX="$2"
STATUS="${3:-release}"

HEADER="$DIR/HEADER.html"
FOOTER="$DIR/FOOTER.html"
HTACCESS="$DIR/.htaccess"

count () {
	case $1 in
		1)	echo one ;;
		2)	echo two ;;
		3)	echo three ;;
		4)	echo four ;;
		5)	echo five ;;
		6)	echo six ;;
		7)	echo seven ;;
		8)	echo eight ;;
		9)	echo nine ;;
		*)
			echo "Can't count up to $1!" >&2
			exit 1
			;;
	esac
}

titlecase () {
	perl -ne 'print "\u$_"'
}

cssincludes () {
	case $PROJECT in
		kubuntu*)
			echo 'http://releases.ubuntu.com/include/kubuntu.css'
			;;
		*)
			echo 'http://releases.ubuntu.com/include/style.css'
			;;
	esac
}

cdtypestr () {
	if dist_lt quantal; then
		# Ubuntu Studio is expected to be oversized in Gutsy; sigh.
		case $PROJECT in
			ubuntustudio)
				CD=DVD
				;;
			*)
				CD=CD
				;;
		esac
		case $2 in
			img|img.gz)
				CD=image
				;;
			tar.gz)
				CD="filesystem archive"
				;;
		esac
	else
		case $2 in
			tar.gz)
				CD="filesystem archive"
				;;
			*)
				CD=image
				;;
		esac
	fi

	case $1 in
		live)
			echo "live $CD"
			;;
		desktop)
			echo "desktop $CD"
			;;
		install)
			echo "install $CD"
			;;
		alternate)
			echo "alternate install $CD"
			;;
		server)
			case $PROJECT in
				edubuntu)
					echo "classroom server $CD"
					;;
				*)
					echo "server install $CD"
					;;
			esac
			;;
		serveraddon)
			# Edubuntu only
			echo "classroom server add-on $CD"
			;;
		addon)
			# Edubuntu only
			echo "Ubuntu educational add-on $CD"
			;;
		dvd)
			echo 'install/live DVD'
			;;
		src)
			echo "source $CD"
			;;
		netbook)
			echo "netbook live $CD"
			;;
		mid)
			echo "MID USB image"
			;;
		moblin-remix)
			echo "Moblin live CD"
			;;
		active)
			echo "preview active image"
			;;
		server-uec|uec)
			echo "UEC image"
			;;
		preinstalled-desktop)
			echo "preinstalled desktop $CD"
			;;
		preinstalled-headless)
			echo "preinstalled headless $CD"
			;;
		preinstalled-server)
			echo "preinstalled server $CD"
			;;
		preinstalled-netbook)
			echo "preinstalled netbook $CD"
			;;
		preinstalled-active)
			echo "preview preinstalled active image"
			;;
		*)
			echo "Unknown image type $1!" >&2
			;;
	esac
}

cdtypedesc () {
	case $PROJECT in
		xubuntu)
			if dist_le intrepid; then
				DESKTOP_RAM=128
			else
				DESKTOP_RAM=192
			fi
			;;
		*)
			if dist_le feisty; then
				DESKTOP_RAM=256
			elif dist_le gutsy; then
				DESKTOP_RAM=320
			elif dist_le hardy; then
				DESKTOP_RAM=384
			elif dist_le maverick; then
				DESKTOP_RAM=256
			else
				DESKTOP_RAM=384
			fi
			;;
	esac

	if dist_lt quantal; then
		# Ubuntu Studio is expected to be oversized in Gutsy; sigh.
		case $PROJECT in
			ubuntustudio)
				CD=DVD
				;;
			*)
				CD=CD
				;;
		esac
		case $2 in
			img|img.gz)
				CD=image
				;;
			tar.gz)
				CD="filesystem archive"
				;;
		esac
	else
		case $2 in
			tar.gz)
				CD="filesystem archive"
				;;
			*)
				CD=image
				;;
		esac
	fi

	case $1 in
		live)
			cat <<EOF
<p>The live $CD allows you to try $CAPPROJECT without changing your computer
at all, and at your option to install it permanently later.</p>
EOF
			;;
		desktop)
			case $PROJECT in
				edubuntu)
					cat <<EOF
<p>The desktop $CD allows you to try $CAPPROJECT without changing your
computer at all, and at your option to install it permanently later. You
will need at least ${DESKTOP_RAM}MiB of RAM to install from this $CD. You
can install additional educational programs using the classroom server
add-on $CD.</p>
EOF
					;;
				*)
					cat <<EOF
<p>The desktop $CD allows you to try $CAPPROJECT without changing your
computer at all, and at your option to install it permanently later.
EOF
					# Only emit this sentence once per
					# page.
					if [ -z "$PREFMSG" ]; then
						cat <<EOF
This type of $CD is what most people will want to use.
EOF
						PREFMSG=1
					fi
					cat <<EOF
You will need at least ${DESKTOP_RAM}MiB of RAM to install from this $CD.</p>
EOF
					;;
			esac
			;;
		install)
			cat <<EOF
<p>The install $CD allows you to install $CAPPROJECT permanently on a
computer.</p>
EOF
			;;
		alternate)
			cat <<EOF
<p>The alternate install $CD allows you to perform certain specialist
installations of $CAPPROJECT. It provides for the following situations:</p>

<ul>
<li>setting up automated deployments;
<li>upgrading from older installations without network access;
<li>LVM and/or RAID partitioning;
<li>installs on systems with less than about ${DESKTOP_RAM}MiB of RAM
(although note that low-memory systems may not be able to run a full desktop
environment reasonably).
</ul>

<p>
In the event that you encounter a bug using the alternate installer,
please file a bug on the
<a href="https://bugs.launchpad.net/ubuntu/+source/debian-installer/+filebug">debian-installer</a>
package.
</p>
EOF
			;;
		mid)
			# MID has lower memory requirements than others
			DESKTOP_RAM=128
			cat <<EOF
<p>The MID USB image allows you to try $CAPPROJECT without changing your
computer at all, and at your option to install it permanently later. This
USB image is optimized for handheld devices with 4-7" touchscreens and
limited processing power. You will need at least ${DESKTOP_RAM}MB of RAM to
install from this image.</p>
EOF
			;;
		moblin-remix)
			cat <<EOF
<p>The live $CD allows you to try Ubuntu Moblin Remix without changing
your computer at all, and at your option to install it permanently later.
This live $CD is optimized for netbooks with screens up to 10". You will need
at least ${DESKTOP_RAM}MB of RAM to install from this $CD.</p>
EOF
			;;
		server)
			case $PROJECT in
				edubuntu)
					cat <<EOF
<p>The classroom server $CD allows you to install $CAPPROJECT permanently on
a computer. It includes LTSP (Linux Terminal Server Project) support,
providing out-of-the-box thin client support. After installation you can
install additional educational programs using the classroom server add-on
$CD.</p>
EOF
					;;
				*)
					cat <<EOF
<p>The server install $CD allows you to install $CAPPROJECT permanently on a
computer for use as a server. It will not install a graphical user
interface.</p>
EOF
					;;
			esac
			;;
		netbook)
			cat <<EOF
<p>The live $CD allows you to try ${CAPPROJECT%-Netbook} Netbook Edition without changing
your computer at all, and at your option to install it permanently later.
This live $CD is optimized for netbooks with screens up to 10". You will need
at least ${DESKTOP_RAM}MiB of RAM to install from this $CD.</p>
EOF
			;;
		active)
			# Kubuntu only
			cat <<EOF
<p>The Active Image offers a preview of the Plasma Active workspace to try or
install.</p>
EOF
			;;
		serveraddon)
			# Edubuntu only
			cat <<EOF
<p>The classroom server add-on $CD contains additional useful packages,
including many educational programs and all available language packs. It
requires that an $CAPPROJECT desktop be installed on the machine.</p>
EOF
			;;
		addon)
			# Edubuntu only
			cat <<EOF
<p>The Ubuntu educational add-on $CD contains additional useful packages, including many
educational programs. It requires that an Ubuntu desktop system already be installed.</p>
EOF
			;;
		dvd)
			case $PROJECT in
				edubuntu)
					cat <<EOF
<p>The install DVD allows you to install $CAPPROJECT permanently on a
computer.</p>
EOF
					;;
				*)
					cat <<EOF
<p>The combined install/live DVD allows you either to install $CAPPROJECT
permanently on a computer, or (by entering 'live' at the boot prompt) to try
$CAPPROJECT without changing your computer at all.</p>
EOF
					;;
			esac
			;;
		src)
			cat <<EOF
<p>The source ${CD}s contain the source code used to build $CAPPROJECT.</p>

<p>Some source package versions on this image may not match related binary
images, depending on exactly when the images were built.  You can always
find every version of Ubuntu source packages on Launchpad, using URLs of the
following form:</p>

<ul>
 <li><code>https://launchpad.net/ubuntu/+source/SOURCE-PACKAGE-NAME/+publishinghistory</code> (index)</li>
 <li><code>https://launchpad.net/ubuntu/+source/SOURCE-PACKAGE-NAME/VERSION</code> (specific version)</li>
</ul>
EOF
			;;
		server-uec|uec)
			cat <<EOF
<p>The Ubuntu Enterprise Cloud image can be run on your personal
<a class="http" href="http://www.ubuntu.com/products/whatisubuntu/serveredition/cloud/uec">Ubuntu
Enterprise Cloud</a>, or modified, rebundled and uploaded to Amazon EC2. For
further instruction on setting up a personal Ubuntu Enterprise Cloud, see
<a class="http" href="https://help.ubuntu.com/community/Eucalyptus">Getting
Started with Ubuntu Enterprise Cloud</a>
</p>
EOF
			;;
		preinstalled-desktop|preinstalled-netbook|preinstalled-headless|preinstalled-server)
			cat <<EOF
<p>The $1 $CD allows you to unpack a preinstalled version of $CAPPROJECT
onto a target device. 
EOF
			;;
		preinstalled-active)
			cat <<EOF
<p>The Active Image allows you to unpack a preinstalled preview of the
Plasma Active workspace onto an SD card.
EOF
			;;
		ubuntu-core)
			cat <<EOF
<p>Ubuntu Core is a minimal rootfs for use in the creation of custom images for specific needs. 
Ubuntu Core strives to create a suitable minimal environment for use in Board Support Packages, 
constrained or integrated environments, or as the basis for application demonstration images.
See the <a class="http" href="https://wiki.ubuntu.com/Core">Ubuntu Core Wikipage</a> for more information.
EOF
			;;
		*)
			echo "Unknown image type $1!" >&2
			;;
	esac
}

uecarchstr () {
	case $1 in
		amd64)
			echo '64-bit'
			;;
		i386)
			echo '32-bit'
			;;
		*)
			# ignore
			;;
	esac
}
	
archstr () {
	case $1 in
		amd64)
			echo '64-bit PC (AMD64)'
			;;
		amd64+mac)
			echo '64-bit Mac (AMD64)'
			;;
		armel)
			echo 'ARM EABI'
			;;
		armel+dove)
			echo 'Marvell Dove'
			;;
		armel+imx51)
			echo 'Freescale i.MX51'
			;;
		armel+omap)
			echo 'Texas Instruments OMAP3'
			;;
		armel+omap4)
			echo 'Texas Instruments OMAP4'
			;;
		armel+ac100)
			echo 'Toshiba AC100 / Dynabook AZ'
			;;
		armel+mx5)
			echo 'Freescale i.MX5x'
			;;
		armhf)
			echo 'ARM EABI (Hard-Float)'
			;;
		armhf+omap)
			echo 'Texas Instruments OMAP3 (Hard-Float)'
			;;
		armhf+omap4)
			echo 'Texas Instruments OMAP4 (Hard-Float)'
			;;
		armhf+ac100)
			echo 'Toshiba AC100 / Dynabook AZ (Hard-Float)'
			;;
		armhf+mx5)
			echo 'Freescale i.MX5x (Hard-Float)'
			;;
		armhf+nexus7)
			echo "Asus/Google Nexus7 Tablet"
			;;
		hppa)
			echo 'HP PA-RISC'
			;;
		i386)
			echo 'PC (Intel x86)'
			;;
		ia64)
			echo 'IA-64'
			;;
		lpia)
			echo 'Low-Power Intel Architecture'
			;;
		powerpc)
			echo 'Mac (PowerPC) and IBM-PPC (POWER5)'
			;;
		powerpc+ps3)
			echo 'PlayStation 3'
			;;
		sparc)
			echo 'SPARC'
			;;
		*)
			echo "Unknown architecture $1!" >&2
			;;
	esac
}

archdesc () {
	case $1 in
		amd64)
			cat <<EOF
Choose this to take full advantage of computers based on the AMD64 or EM64T
architecture (e.g., Athlon64, Opteron, EM64T Xeon, Core 2). If you have
a non-64-bit processor made by AMD, or if you need full support for
32-bit code, use the Intel x86 images instead.
EOF
			;;
		amd64+mac)
			cat <<EOF
Choose this to take full advantage of computers based on the AMD64 or EM64T
architecture (e.g., Athlon64, Opteron, EM64T Xeon, Core 2). If you have
a non-64-bit processor made by AMD, or if you need full support for
32-bit code, use the Intel x86 images instead. This image is adjusted to
work properly on Mac systems.
EOF
			;;
		armel)
			cat <<EOF
For ARMv7 processors and above.
EOF
			;;
		armel+dove)
			cat <<EOF
For Dove boards.
EOF
			;;
		armel+imx51)
			cat <<EOF
For i.MX51 boards.
EOF
			;;
		armel+mx5|armhf+mx5)
			cat <<EOF
For Freescale i.MX5x boards. See <a href="https://wiki.ubuntu.com/ARM/MX5">ARM/MX5</a>
for detailed installation information.
EOF
			;;
		armel+omap|armhf+omap)
			cat <<EOF
For OMAP3 boards. See <a href="https://wiki.ubuntu.com/ARM/OMAP">ARM/OMAP</a>
for detailed installation information.
EOF
			;;
		armel+omap4|armhf+omap4)
			cat <<EOF
For OMAP4 boards. See <a href="https://wiki.ubuntu.com/ARM/OMAP">ARM/OMAP</a>
for detailed installation information.
EOF
			;;
		armel+ac100|armhf+ac100)
			cat <<EOF
For Toshiba AC100 / Dynabook AZ netbooks. See <a href="https://wiki.ubuntu.com/ARM/TEGRA/AC100">ARM/TEGRA/AC100</a>
for detailed installation information (please make sure to download the 
.bootimg file alongside with the filesystem archive).
EOF
			;;
		armhf+nexus7)
			cat <<EOF
For the Asus/Google Nexus7 tablet. See <a href="https://wiki.ubuntu.com/Nexus7">the Nexus7 wikipages</a> for detailed
installation information.
EOF
			;;
		armhf)
			cat <<EOF
For ARMv7 processors and above (Hard-Float).
EOF
			;;
		hppa)
			cat <<EOF
For HP PA-RISC computers.
EOF
			;;
		i386)
			cat <<EOF
For almost all PCs. This includes most machines with Intel/AMD/etc type
processors and almost all computers that run Microsoft Windows, as well as
newer Apple Macintosh systems based on Intel processors. Choose this if you
are at all unsure.
EOF
			;;
		ia64)
			cat <<EOF
For Intel Itanium and Itanium 2 computers.
EOF
			;;
		lpia)
			cat <<EOF
For devices using the Low-Power Intel Architecture, including the A1xx and Atom processors.
EOF
			;;
		powerpc)
			cat <<EOF
For Apple Macintosh G3, G4, and G5 computers, including iBooks and
PowerBooks as well as IBM OpenPower machines.
EOF
			;;
		powerpc+ps3)
			cat <<EOF
For Sony PlayStation 3 systems.
EOF
			if [ "$2" = desktop ] && dist_ge gutsy; then
				cat <<EOF
(This defaults to installing $CAPPROJECT permanently, since there is usually
not enough memory to try out the full desktop system and run the installer
at the same time. An alternative boot option to try $CAPPROJECT without
changing your computer is available.)
EOF
			fi
			;;
		sparc)
			cat <<EOF
For Sun UltraSPARC computers, including those based on the multicore
UltraSPARC T1 ("Niagara") processors.
EOF
			;;
		*)
			echo "Unknown architecture $1!" >&2
			;;
	esac
}

maybe_oversized () {
	if [ "$STATUS" = daily ] && [ -e "$1" ]; then
		local realtype
		if [ "$2" = dvd ] || [ "$PROJECT" = ubuntustudio ]; then
			realtype=dvd
		elif [ "$PROJECT" = ubuntu-mid ] || \
		     [ "$PROJECT" = ubuntu-moblin-remix ]; then
			realtype=usb
		else
			realtype=cd
		fi
		case $realtype in
			cd)
				cat <<EOF
<br>
<span class="urgent">Warning: This image is oversized (which is a bug) and
will not fit onto a standard 703MiB CD. However, you may still test it using
a DVD, a USB drive, or a virtual machine.</span>
EOF
				;;
			usb)
				cat <<EOF
<br>
<span class="urgent">Warning: This image is oversized (which is a bug) and
will not fit onto a 1GB USB stick. However, you may still test it using a
DVD, a larger USB drive, or a virtual machine.</span>
EOF
				;;
			dvd)
				cat <<EOF
<br>
<span class="urgent">Warning: This image is oversized (which is a bug) and
will not fit onto a single-sided single-layer DVD. However, you may still
test it using a larger USB drive or a virtual machine.</span>
EOF
				;;
		esac
	fi
}

# Some MIME types aren't configured by default.
mimetypestr () {
	case $1 in
		img)
			echo application/octet-stream
			;;
	esac
}

extensionstr () {
	case $1 in
		img)
			echo 'USB image'
			;;
		img.gz)
			echo 'preinstalled SD Card image'
			;;
		iso)
			echo 'standard download'
			;;
		iso.torrent|img.torrent)
			echo '<a href=\"https://help.ubuntu.com/community/BitTorrent\">BitTorrent</a> download'
			;;
		jigdo)
			echo '<a href=\"http://atterer.org/jigdo/\">jigdo</a> download'
			;;
		list)
			echo 'file listing'
			;;
		manifest)
			echo 'contents of live filesystem'
			;;
		manifest-desktop)
			echo 'contents of desktop part of live filesystem'
			;;
		manifest-remove)
			echo 'packages to remove from live filesystem on installation'
			;;
		template)
			echo '<a href=\"http://atterer.org/jigdo/\">jigdo</a> template'
			;;
		iso.zsync|img.zsync|img.gz.zsync|tar.gz.zsync)
			echo '<a href=\"http://zsync.moria.org.uk/\">zsync</a> metafile'
			;;
		vmlinuz-ec2)
			echo 'EC2 kernel image'
			;;
		vmlinuz-virtual)
			flavor=${1#*-}
			echo 'UEC kernel image'
			;;
		initrd-ec2)
			echo 'EC2 initramfs image'
			;;
		initrd-virtual)
			flavor=${1#*-}
			echo 'UEC initramfs image'
			;;
		img.tar.gz)
			echo 'UEC/EC2 filesystem image'
			;;
		tar.gz)
			case $PROJECT in
				server-uec|uec)
					echo 'Cloud Images tarball'
				;;
				*)
					echo 'filesystem archive'
				;;
			esac
			;;
		bootimg)
			echo 'combined Android bootimage'
			;;
		*)
			echo "Unknown extension $1!" >&2
			;;
	esac
}

rm -f "$HTACCESS" "$HEADER" "$FOOTER"

> "$HTACCESS"

case $DIST in
	warty)
		distversion=4.10
		distfullname='Warty Warthog'
		;;
	hoary)
		distversion=5.04
		distfullname='Hoary Hedgehog'
		;;
	breezy)
		distversion=5.10
		distfullname='Breezy Badger'
		;;
	dapper)
		distversion=6.06.2
		distfullname='Dapper Drake'
		case $PROJECT in
			ubuntu|kubuntu|edubuntu|ubuntu-server)
				distversion="$distversion LTS"
				;;
		esac
		;;
	edgy)
		distversion=6.10
		distfullname='Edgy Eft'
		;;
	feisty)
		distversion=7.04
		distfullname='Feisty Fawn'
		;;
	gutsy)
		distversion=7.10
		distfullname='Gutsy Gibbon'
		;;
	hardy)
		distversion=8.04.4
		distfullname='Hardy Heron'
		case $PROJECT in
			ubuntu|ubuntu-server)
				distversion="$distversion LTS"
				;;
		esac
		;;
	intrepid)
		distversion=8.10
		distfullname='Intrepid Ibex'
		;;
	jaunty)
		distversion=9.04
		distfullname='Jaunty Jackalope'
		;;
	karmic)
		distversion=9.10
		distfullname='Karmic Koala'
		;;
	lucid)
		distversion=10.04.4
		distfullname='Lucid Lynx'
		case $PROJECT in
			ubuntu|kubuntu|ubuntu-server)
				distversion="$distversion LTS"
				;;
		esac
		;;
	maverick)
		distversion=10.10
		distfullname='Maverick Meerkat'
		;;
	natty)
		distversion=11.04
		distfullname='Natty Narwhal'
		;;
	oneiric)
		distversion=11.10
		distfullname='Oneiric Ocelot'
		;;
	precise)
		distversion=12.04.2
		distfullname='Precise Pangolin'
		case $PROJECT in
			ubuntu|kubuntu|ubuntu-server|edubuntu*|xubuntu|mythbuntu|ubuntustudio)
				distversion="$distversion LTS"
				;;
		esac
		;;
	quantal)
		distversion=12.10
		distfullname='Quantal Quetzal'
		;;
	raring)
		distversion=13.04
		distfullname='Raring Ringtail'
		;;
esac

case $CDPREFIX in
	*-alpha-*)
		distextra=" Alpha ${CDPREFIX#*-alpha-}"
		;;
	*-preview)
		distextra=' Preview'
		;;
	*-beta)
		distextra=' Beta'
		;;
	*-beta?*)
		distextra=" Beta $(echo "$CDPREFIX" | sed 's/.*-beta//')"
		;;
	*-rc)
		distextra=' Release Candidate'
		;;
	$DIST)
		distextra=' Daily Build'
		;;
	*.*.*)
		# point release - need the base version too
		CDPREFIX="$CDPREFIX ${CDPREFIX%.*}"
		distextra=
		important=:
		;;
	*)
		distextra=
		;;
esac

cat <<EOF > "$HEADER"
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
 "http://www.w3.org/TR/html4/strict.dtd">
<html>
 <head>
  <title>$CAPPROJECT $distversion ($distfullname)$distextra</title>
  <!-- Main style sheets for CSS2 capable browsers -->
  <style type="text/css" media="screen">
EOF
for css in $(cssincludes); do
	cat <<EOF >> "$HEADER"
  @import url($css);
EOF
done
cat <<EOF >> "$HEADER"
  pre { background: none; }
  body { margin: 2em; }
  </style>
 </head>
 <body><div id="pageWrapper">

<div id="header"><a href="http://www.ubuntu.com/"></a></div>

<h1>$CAPPROJECT $distversion ($distfullname)$distextra</h1>

<div id="main">

<h2>Select an image</h2>

EOF

cdtypecount=0
for prefix in $CDPREFIX; do
	for cdtype in live desktop server install alternate serveraddon \
	    addon dvd src netbook mid moblin-remix active mobile uec server-uec \
	    preinstalled-desktop preinstalled-netbook preinstalled-mobile preinstalled-active \
	    preinstalled-headless preinstalled-server
	do
		if find "$DIR/" -follow -maxdepth 1 -type f -name "$prefix-$cdtype-*.list" -o -name "$prefix-$cdtype.img" -o -name "$prefix-$cdtype-*.img.gz" -o -name "$prefix-$cdtype-*.tar.gz" | grep . >/dev/null; then
			cdtypecount="$(($cdtypecount + 1))"
		fi
	done
done

if [ "$cdtypecount" -gt 1 ]; then
	cat <<EOF >> "$HEADER"
<p>$CAPPROJECT is distributed on $(count "$cdtypecount") types of images described below.</p>

EOF
fi

foundtorrent=0

for prefix in $CDPREFIX; do
	for cdtype in live desktop server install alternate serveraddon addon \
	    dvd src netbook mid moblin-remix mobile active uec server-uec \
	    preinstalled-desktop preinstalled-netbook preinstalled-mobile preinstalled-active \
	    preinstalled-headless preinstalled-server
	do
		if ! find "$DIR/" -follow -maxdepth 1 -type f -name "$prefix-$cdtype-*.list" -o -name "$prefix-$cdtype.img" -o -name "$prefix-$cdtype-*.img.gz" -o -name "$prefix-$cdtype-*.tar.gz" | grep . >/dev/null; then
			continue
		fi

		case $cdtype in
			src)
				# Perverse, but works.
				arches="$(find "$DIR/" -follow -maxdepth 1 -type f -name "$prefix-$cdtype-*.iso" -printf '%P\n' | \
					  sed "s/$prefix-$cdtype-\\(.*\\)\\.iso/\\1/" | sort -n)"
				;;
			*)
				arches='i386 amd64 amd64+mac armel+dove armel+imx51 armel+omap armel+omap4 armel+ac100 armel+mx5 armhf+omap armhf+omap4 armhf+ac100 armhf+mx5 armhf+nexus7 powerpc powerpc+ps3 hppa ia64 lpia sparc'
				;;
		esac

		for format in iso img img.gz img.tar.gz tar.gz; do
			archcount=0
			if [ "$format" = img ] && [ -e "$DIR/$prefix-$cdtype.$format" ]; then
				archcount="$(($archcount + 1))"
			fi
			for arch in $arches; do
				if [ -e "$DIR/$prefix-$cdtype-$arch.$format" ]; then
					archcount="$(($archcount + 1))"
				fi
			done
			if [ "$archcount" = 0 ]; then
				continue
			fi

			cat <<EOF >> "$HEADER"
<h3>$(cdtypestr "$cdtype" "$format" | titlecase)</h3>

$(cdtypedesc "$cdtype" "$format")

EOF

			if [ "$archcount" -eq 1 ]; then
				cat <<EOF >> "$HEADER"
<p>There is one image available:</p>
EOF
			elif [ "$cdtype" = src ]; then
				cat <<EOF >> "$HEADER"
<p>There are $(count "$archcount") images available:</p>
EOF
			else
				cat <<EOF >> "$HEADER"
<p>There are $(count "$archcount") images available, each for a different type of computer:</p>
EOF
			fi

			cat <<EOF >> "$HEADER"

<dl>
EOF

			if [ "$format" = img ] && [ -e "$DIR/$prefix-$cdtype.$format" ]; then
				case $cdtype in
					mid)
						imgarch=lpia
						;;
					*)
						echo "Unknown image type $1!" >&2
						;;
				esac
				imagestr="$(archstr "$imgarch") $(cdtypestr "$cdtype" "$format")"
				htaccessimagestr="$(cdtypestr "$cdtype" "$format" | titlecase) for $(archstr "$imgarch") computers"

				cat <<EOF >> "$HEADER"
<dt><a href="$prefix-$cdtype.$format">$imagestr</a>

<dd>$(archdesc "$imgarch" "$cdtype")$(maybe_oversized "$DIR/$prefix-$cdtype.OVERSIZED")</dd>

EOF

				for extension in img manifest; do
					if ! [ -e "$DIR/$prefix-$cdtype.$extension" ]; then
						continue
					fi

					echo "AddDescription \"$htaccessimagestr ($(extensionstr "$extension"))\" $prefix-$cdtype.$extension" >> "$HTACCESS"
				done
			fi

			for arch in $arches; do
				case $cdtype in
					src)
						imagestr="$(cdtypestr "$cdtype" "$format" | titlecase) $arch"
						htaccessimagestr="$imagestr"
						;;
					server-uec|uec)
						imagestr="$(uecarchstr "$arch") $(cdtypestr "$cdtype" "$format")"
						htaccessimagestr="$(cdtypestr "$cdtype" "$format" | titlecase) for $(uecarchstr "$arch") computers"
						;;
					*)
						imagestr="$(archstr "$arch") $(cdtypestr "$cdtype" "$format")"
						htaccessimagestr="$(cdtypestr "$cdtype" "$format" | titlecase) for $(archstr "$arch") computers"
						;;
				esac

				if [ -e "$DIR/$prefix-$cdtype-$arch.$format" ]; then
					cat <<EOF >> "$HEADER"
<dt><a href="$prefix-$cdtype-$arch.$format">$imagestr</a>
EOF
				elif [ -e "$DIR/$prefix-$cdtype-$arch.$format.torrent" ]; then
					cat <<EOF >> "$HEADER"
<dt><a href="$prefix-$cdtype-$arch.$format.torrent">$imagestr (<a href="https://help.ubuntu.com/community/BitTorrent">BitTorrent</a> only)</a>
EOF
				else
					continue
				fi

				if [ -e "$DIR/$prefix-$cdtype-$arch.$format.torrent" ]; then
					foundtorrent=1
				fi

				if [ "$cdtype" != src ]; then
					cat <<EOF >> "$HEADER"

<dd>$(archdesc "$arch" "$cdtype")$(maybe_oversized "$DIR/$prefix-$cdtype-$arch.OVERSIZED" "$cdtype")</dd>

EOF
				fi

				for extension in img.gz.torrent img.gz.zsync img.gz img.tar.gz img.torrent img.zsync img iso.torrent iso.zsync iso jigdo list manifest manifest-desktop manifest-remove template tar.gz tar.gz.zsync bootimg; do
					if ! [ -e "$DIR/$prefix-$cdtype-$arch.$extension" ]; then
						continue
					fi

					echo "AddDescription \"$htaccessimagestr ($(extensionstr "$extension"))\" $prefix-$cdtype-$arch.$extension" >> "$HTACCESS"
				done
				for extension in initrd-ec2 initrd-virtual vmlinuz-ec2 vmlinuz-virtual; do
					if ! [ -e "$DIR/$prefix-$cdtype-$arch-$extension" ]; then
						continue
					fi

					echo "AddDescription \"$htaccessimagestr ($(extensionstr "$extension"))\" $prefix-$cdtype-$arch-$extension" >> "$HTACCESS"
				done
			done

			cat <<EOF >> "$HEADER"
</dl>

EOF
		done
	done
done

if [ -e "$DIR/published-ec2-$STATUS.txt" ]; then
	cat <<EOF >> "$HEADER"
<h3>Amazon EC2 Published AMIs</h3>

<p>The images have been published to
<a class="http" href="http://www.ubuntu.com/products/whatisubuntu/serveredition/features/ec2">Amazon
EC2</a>, and can be used immediately with no need to download anything.  See
the table below for the AMI ids. For further instruction on getting started
with Amazon EC2, see the
<a class="http" href="https://help.ubuntu.com/community/EC2StartersGuide">EC2
Starters Guide</a>.
</p>

<table><tbody><tr>
  <td><p> Availability Zone </p></td>
  <td><p> arch </p></td>
  <td><p> ami </p></td>
  <td><p> ec2 command</p></td>
</tr>
EOF
	grep ami "$DIR/published-ec2-$STATUS.txt" | while read zone ami manifest
	do
		case $manifest in
			*amd64*)
				arch=64-bit
				link='http://developer.amazonwebservices.com/connect/entry%21default.jspa?categoryID=223&amp;externalID=2755&amp;fromSearchPage=true'
				args="--instance-type m1.large"
				;;
			*i386*)
				arch=32-bit
				link='http://developer.amazonwebservices.com/connect/kbclick.jspa?categoryID=223&amp;externalID=2754&amp;searchID=1818410'
				args="--instance-type m1.small"
				;;
		esac
		case $zone in
			eu-west-1)
				zonename=Europe
				args="$args --region $zone"
				;;
			us-east-1)
				zonename=US
				;;
		esac
		cat <<EOF >> "$HEADER"
<tr>
  <td><p> $zonename </p></td>
  <td><p> $arch </p></td>
  <td><p> <a href="$link"><tt>$ami</tt></a> </p></td>
  <td><p> <tt>ec2-run-instances $ami --key \${EC2_KEYPAIR} $args </tt> </p></td>
EOF
	done

	echo "</tbody></table>" >> "$HEADER"
fi

if dist_ge precise && \
   find "$DIR/" -follow -maxdepth 1 -type f -name \*-arm\* | grep . >/dev/null; then
        cat <<EOF >> "$HEADER"
<p>For ARM hardware for which we do not ship preinstalled images, see 
<a href="https://wiki.ubuntu.com/ARM/Server/Install">ARM/Server/Install</a> 
for detailed installation information.  </p>

EOF
fi

if [ "$foundtorrent" = 1 ]; then
	cat <<EOF >> "$HEADER"
<p>A full list of available files, including <a
href="https://help.ubuntu.com/community/BitTorrent">BitTorrent</a> files,
can be found below.</p>

EOF
else
	cat <<EOF >> "$HEADER"
<p>A full list of available files can be found below.</p>

EOF
fi

gotiso=
gotimg=
if find "$DIR/" -follow -maxdepth 1 -type f -name "*.iso" | grep . >/dev/null; then
	gotiso=1
fi
if find "$DIR/" -follow -maxdepth 1 -type f -name "*.img" | grep . >/dev/null; then
	gotimg=1
fi
if [ "$gotiso" ] && [ "$gotimg" ]; then
	cat <<EOF >> "$HEADER"
<p>If you need help burning these images to disk, see the 
<a href="https://help.ubuntu.com/community/BurningIsoHowto">Image Burning Guide</a> or the
<a href="https://wiki.ubuntu.com/MobileTeam/Mobile/HowTo/ImageWriting">USB Image Writing Guide</a>.</p>

EOF
elif [ "$gotiso" ]; then
	cat <<EOF >> "$HEADER"
<p>If you need help burning these images to disk, see the 
<a href="https://help.ubuntu.com/community/BurningIsoHowto">Image Burning Guide</a>.</p>

EOF
elif [ "$gotimg" ]; then
	cat <<EOF >> "$HEADER"
<p>It is recommended you have at least a 1GB USB storage device to burn the
image to. If you need help burning these images to disk, see the 
<a href="https://wiki.ubuntu.com/MobileTeam/Mobile/HowTo/ImageWriting">USB Image Writing Guide</a>.</p>

EOF
fi

cat <<EOF > "$FOOTER"
</div></div></body></html>
EOF

# we may not be mirrored to the webserver root, so calculate a relative
# path for the icons
CDICONS=cdicons/
RELDIR="$(readlink -f "$DIR")"
while [ -n "$RELDIR" ]; do
	DIRPART=${RELDIR##*/}
	RELDIR=${RELDIR%/*}
	if [ -z "$DIRPART" ]; then
		continue
	fi
	if [ "$DIRPART" = "full" ] || [ "$DIRPART" = "simple" ]; then
		break
	fi
	CDICONS="../$CDICONS"
done

case "$PROJECT" in
	kubuntu*)
		CDICONS="${CDICONS}kubuntu-"
		;;
	*)
		;;
esac

cat <<EOF >> "$HTACCESS"

HeaderName HEADER.html
ReadmeName FOOTER.html
IndexIgnore .htaccess HEADER.html FOOTER.html published-ec2-daily.txt published-ec2-release.txt
IndexOptions NameWidth=* DescriptionWidth=* SuppressHTMLPreamble FancyIndexing IconHeight=22 IconWidth=22
AddIcon ${CDICONS}folder.png ^^DIRECTORY^^
AddIcon ${CDICONS}iso.png .iso
AddIcon ${CDICONS}img.png .img .tar.gz
AddIcon ${CDICONS}jigdo.png .jigdo .template
AddIcon ${CDICONS}list.png .list .manifest .html .zsync MD5SUMS MD5SUMS.gpg MD5SUMS-metalink MD5SUMS-metalink.gpg SHA1SUMS SHA1SUMS.gpg SHA256SUMS SHA256SUMS.gpg
AddIcon ${CDICONS}torrent.png .torrent .metalink
EOF

for extension in img.gz.torrent img.gz img.torrent img iso.torrent iso jigdo list manifest manifest-desktop manifest-remove template; do
	mimetype="$(mimetypestr "$extension")"
	if [ "$mimetype" ] && \
	   find "$DIR/" -follow -maxdepth 1 -type f -name "*.$extension" | grep . >/dev/null; then
		echo "AddType $mimetype .$extension" >> "$HTACCESS"
	fi
done
