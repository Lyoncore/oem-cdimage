#! /bin/sh
set -e

export CDIMAGE_ROOT=/srv/cdimage.no-name-yet.com
. "$CDIMAGE_ROOT/etc/config"

if [ -z "$1" ] || [ -z "$2" ]; then
	echo 'Usage: make-web-indices DIR CDPREFIX' >&2
	exit 1
fi

DIR="$1"
CDPREFIX="$2"

HEADER="$DIR/HEADER.html"
FOOTER="$DIR/FOOTER.html"
HTACCESS="$DIR/.htaccess"

count () {
	case $1 in
		1)	echo one ;;
		2)	echo two ;;
		3)	echo three ;;
		4)	echo four ;;
		5)	echo five ;;
		6)	echo six ;;
		7)	echo seven ;;
		8)	echo eight ;;
		9)	echo nine ;;
		*)
			echo "Can't count up to $1!" >&2
			exit 1
			;;
	esac
}

titlecase () {
	perl -ne 'print "\u$_"'
}

cdtypestr () {
	case $1 in
		live)
			echo 'desktop CD'
			;;
		install)
			echo 'text-mode install CD'
			;;
		dvd)
			echo 'install/live DVD'
			;;
		src)
			echo 'source CD'
			;;
		*)
			echo "Unknown CD type $1!" >&2
			;;
	esac
}

cdtypedesc () {
	case $1 in
		live)
			cat <<EOF
The desktop CD allows you to try $CAPPROJECT without changing your computer
at all, and at your option to install it permanently later. This type of CD
is what most people will want to use.
EOF
			;;
		install)
			cat <<EOF
The text-mode install CD allows you to perform certain specialist
installations of $CAPPROJECT. This type of CD is intended for cases such as
creating pre-configured OEM systems or setting up automated deployments.
EOF
			;;
		dvd)
			case $PROJECT in
				edubuntu)
					cat <<EOF
The install DVD allows you to install $CAPPROJECT permanently on a computer.
EOF
					;;
				*)
					cat <<EOF
The combined install/live DVD allows you either to install $CAPPROJECT
permanently on a computer, or (by entering 'live' at the boot prompt) to try
$CAPPROJECT without changing your computer at all.
EOF
					;;
			esac
			;;
		src)
			cat <<EOF
The source CDs contain the source code used to build $CAPPROJECT.
EOF
			;;
		*)
			echo "Unknown CD type $1!" >&2
			;;
	esac
}

archstr () {
	case $1 in
		amd64)
			echo '64-bit PC (AMD64)'
			;;
		hppa)
			echo 'HP PA-RISC'
			;;
		i386)
			echo 'PC (Intel x86)'
			;;
		ia64)
			echo 'IA-64'
			;;
		powerpc)
			echo 'Mac (PowerPC)'
			;;
		sparc)
			echo 'SPARC'
			;;
		*)
			echo "Unknown architecture $1!" >&2
			;;
	esac
}

archdesc () {
	case $1 in
		amd64)
			cat <<EOF
For computers based on the AMD64 or EM64T architecture (e.g., Athlon64,
Opteron, EM64T Xeon). It is not necessary for all (even most) processors
made by AMD -- only their 64 bit chips.
EOF
			;;
		hppa)
			cat <<EOF
For HP PA-RISC computers.
EOF
			;;
		i386)
			cat <<EOF
For almost all PCs. This includes most machines with Intel/AMD/etc type
processors and almost all computers that run Microsoft Windows. Choose this
if you are at all unsure.
EOF
			;;
		ia64)
			cat <<EOF
For Intel Itanium and Itanium 2 computers.
EOF
			;;
		powerpc)
			cat <<EOF
For Apple Macintosh G3, G4, and G5 computers, including iBooks and
PowerBooks.
EOF
			;;
		sparc)
			cat <<EOF
For Sun UltraSPARC computers.
EOF
			;;
		*)
			echo "Unknown architecture $1!" >&2
			;;
	esac
}

extensionstr () {
	case $1 in
		iso)
			echo 'standard download'
			;;
		iso.torrent)
			echo '<a href=\"http://bittorrent.com/introduction.html\">BitTorrent</a> download'
			;;
		jigdo)
			echo '<a href=\"http://atterer.net/jigdo/\">jigdo</a> download'
			;;
		list)
			echo 'file listing'
			;;
		manifest)
			echo 'contents of live filesystem'
			;;
		manifest-desktop)
			echo 'contents of desktop part of live filesystem'
			;;
		template)
			echo '<a href=\"http://atterer.net/jigdo/\">jigdo</a> template'
			;;
		*)
			echo "Unknown extension $1!" >&2
			;;
	esac
}

rm -f "$HTACCESS" "$HEADER" "$FOOTER"

> "$HTACCESS"

case $DIST in
	warty)
		distversion=4.10
		distfullname='Warty Warthog'
		;;
	hoary)
		distversion=5.04
		distfullname='Hoary Hedgehog'
		;;
	breezy)
		distversion=5.10
		distfullname='Breezy Badger'
		;;
	dapper)
		distversion=6.06
		distfullname='Dapper Drake'
		;;
esac

case $CDPREFIX in
	*-preview)
		distextra=' Preview'
		;;
	*-beta)
		distextra=' Beta'
		;;
	*-rc)
		distextra=' Release Candidate'
		;;
	$DIST)
		distextra=' Daily Build'
		;;
	*)
		distextra=
		;;
esac

cat <<EOF > "$HEADER"
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
 "http://www.w3.org/TR/html4/strict.dtd">
<html>
 <head>
  <title>$CAPPROJECT $distversion ($distfullname)$distextra</title>
  <!-- Main style sheets for CSS2 capable browsers -->
  <style type="text/css" media="screen">
  @import url(http://www.ubuntu.com/include/plone.css);
  @import url(http://www.ubuntu.com/include/ubuntu.css);
  pre { background: none; }
  body { margin: 2em; }
  </style>
 </head>
 <body><div id="pageWrapper">

<h1>$CAPPROJECT $distversion ($distfullname)$distextra</h1>

<h2>Select an image</h2>

EOF

cdtypecount=0
for cdtype in live install dvd src; do
	if find "$DIR/" -follow -maxdepth 1 -type f -name "$CDPREFIX-$cdtype-*.list" | grep . >/dev/null; then
		cdtypecount="$(($cdtypecount + 1))"
	fi
done

if [ "$cdtypecount" -gt 1 ]; then
	cat <<EOF >> "$HEADER"
<p>$CAPPROJECT is distributed on $(count "$cdtypecount") types of images described below.</p>

EOF
fi

foundtorrent=0

for cdtype in live install dvd src; do
	if ! find "$DIR/" -follow -maxdepth 1 -type f -name "$CDPREFIX-$cdtype-*.list" | grep . >/dev/null; then
		continue
	fi

	case $cdtype in
		src)
			# Perverse, but works.
			arches="$(find "$DIR/" -follow -maxdepth 1 -type f -name "$CDPREFIX-$cdtype-*.iso" -printf '%P\n' | \
				  sed "s/$CDPREFIX-$cdtype-\\(.*\\)\\.iso/\\1/")"
			;;
		*)
			arches='i386 powerpc amd64 hppa ia64 sparc'
			;;
	esac

	cat <<EOF >> "$HEADER"
<h3>$(cdtypestr "$cdtype" | titlecase)</h3>

<p>$(cdtypedesc "$cdtype")
EOF

	archcount=0
	for arch in $arches; do
		if [ -e "$DIR/$CDPREFIX-$cdtype-$arch.list" ]; then
			archcount="$(($archcount + 1))"
		fi
	done

	if [ "$archcount" -eq 1 ]; then
		cat <<EOF >> "$HEADER"
There is one image available:</p>
EOF
	elif [ "$cdtype" = src ]; then
		cat <<EOF >> "$HEADER"
There are $(count "$archcount") images available:</p>
EOF
	else
		cat <<EOF >> "$HEADER"
There are $(count "$archcount") images available, each for a different type of computer:</p>
EOF
	fi

	cat <<EOF >> "$HEADER"

<dl>
EOF

	for arch in $arches; do
		case $cdtype in
			src)
				imagestr="$(cdtypestr "$cdtype" | titlecase) $arch"
				htaccessimagestr="$imagestr"
				;;
			*)
				imagestr="$(archstr "$arch") $(cdtypestr "$cdtype")"
				htaccessimagestr="$(cdtypestr "$cdtype" | titlecase) for $(archstr "$arch") computers"
				;;
		esac

		if [ -e "$DIR/$CDPREFIX-$cdtype-$arch.iso" ]; then
			cat <<EOF >> "$HEADER"
<dt><a href="$CDPREFIX-$cdtype-$arch.iso">$imagestr</a>
EOF
		elif [ -e "$DIR/$CDPREFIX-$cdtype-$arch.iso.torrent" ]; then
			cat <<EOF >> "$HEADER"
<dt><a href="$CDPREFIX-$cdtype-$arch.iso.torrent">$imagestr (<a href="http://bittorrent.com/introduction.html">BitTorrent</a> only)</a>
EOF
		else
			continue
		fi

		if [ -e "$DIR/$CDPREFIX-$cdtype-$arch.iso.torrent" ]; then
			foundtorrent=1
		fi

		if [ "$cdtype" != src ]; then
			cat <<EOF >> "$HEADER"

<dd>$(archdesc "$arch")</dd>

EOF
		fi

		for extension in iso.torrent iso jigdo list manifest manifest-desktop template; do
			if ! [ -e "$DIR/$CDPREFIX-$cdtype-$arch.$extension" ]; then
				continue
			fi

			echo "AddDescription \"$htaccessimagestr ($(extensionstr "$extension"))\" $CDPREFIX-$cdtype-$arch.$extension" >> "$HTACCESS"
		done
	done

	cat <<EOF >> "$HEADER"
</dl>

EOF
done

if [ "$foundtorrent" = 1 ]; then
	cat <<EOF >> "$HEADER"
<p>A full list of available files, including <a
href="http://bittorrent.com/introduction.html">BitTorrent</a> files,
can be found below.</p>

EOF
else
	cat <<EOF >> "$HEADER"
<p>A full list of available files can be found below.</p>

EOF
fi

cat <<EOF >> "$HEADER"
<p>If you need help burning these images to disk, see
<a href="http://wiki.ubuntu.com/BurningIsoHowto">this guide</a>.</p>

EOF

cat <<EOF > "$FOOTER"
</div></body></html>
EOF

cat <<EOF >> "$HTACCESS"

HeaderName HEADER.html
ReadmeName FOOTER.html
IndexIgnore .htaccess HEADER.html FOOTER.html
IndexOptions NameWidth=* DescriptionWidth=* SuppressHTMLPreamble FancyIndexing
EOF
