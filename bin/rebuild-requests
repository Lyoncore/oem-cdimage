#! /usr/bin/python
# -*- coding: utf-8 -*-

# Copyright (C) 2013 Canonical Ltd.
# Author: St√©phane Graber <stgraber@ubuntu.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""Fetches the list of pending rebuilds."""

from optparse import OptionParser
import os
import subprocess
import sys

sys.path.insert(0, os.path.join(sys.path[0], os.pardir, "lib"))
from cdimage.config import Config
from cdimage.tree import Publisher, Tree


def main():
    parser = OptionParser(usage="Usage: %prog [options] SERIES INSTANCE")
    parser.add_option('-b', '--build', help="Build any pending product",
                      action="store_true", default=False)
    parser.add_option('-n', '--dry-run', help="Print the commands that "
                                              "would normally be run",
                      action="store_true", default=False)
    parser.add_option('-q', '--quiet', help="Hide all info messages",
                      action="store_true", default=False)
    options, args = parser.parse_args()

    if len(args) < 2:
        parser.error("need series and instance")

    config = Config()
    tree = Tree.get_daily(config)
    publisher = Publisher.get_daily(tree, "daily")

    # Only import it here to avoid --help failing from the bzr branch
    from isotracker import ISOTracker

    tracker = ISOTracker(target="%s-%s" % (args[1], args[0]))

    if not options.build:
        # List all the pending entries
        for rebuild in tracker.qatracker.get_rebuilds("Requested"):
            if rebuild.series_title.lower() != args[0]:
                continue

            print(" - %s for %s (requested by %s) => %s " %
                  (rebuild.product_title, rebuild.series_title,
                   rebuild.requestedby_name,
                   publisher.cdimage_project(rebuild.product_title, args[1])))
        return

    # Process any pending rebuild
    rebuilds = {}
    queue = tracker.qatracker.get_rebuilds("Requested")
    processes = []

    # Group everything by project+build_type
    for rebuild in queue:
        if rebuild.series_title.lower() != args[0]:
            continue

        project = publisher.cdimage_project(rebuild.product_title, args[1])

        if not project:
            print("Invalid entry '%s' for '%s'" % (rebuild.product_title,
                                                   args[0]))
            continue

        project_id = "%s/%s" % (project[0], project[1])

        if project_id not in rebuilds:
            rebuilds[project_id] = []

        rebuilds[project_id].append([rebuild] + list(project))

    for project_id, entries in rebuilds.items():
        if not options.quiet:
            print("Processing rebuilds for: %s" % project_id)

        project, build_type = project_id.split("/")
        arches = " ".join([entry[4] for entry in entries])

        for entry in entries:
            # Marking the entry as "queued"
            if not options.dry_run:
                entry[0].status = 1
                entry[0].save()

            if not options.quiet:
                print(" - %s for %s (requested by %s) => %s " %
                      (entry[0].product_title, entry[0].series_title,
                       entry[0].requestedby_name, entry[1:]))

        env = dict(os.environ)
        env['ARCHES'] = arches
        env['DIST'] = entries[0][0].series_title.lower()
        cmd = ["for-project", entry[1], "cron.%s" % entry[2]]

        if build_type not in ("daily") or entry[1] in ("ubuntu-core"):
            cmd += ["--live"]

        if options.dry_run:
            if not options.quiet:
                print("Dry-run: ARCHES=%s DIST=%s %s" % (env['ARCHES'],
                                                         env['DIST'],
                                                         " ".join(cmd)))
        else:
            processes.append(subprocess.Popen(cmd, env=env))
        if not options.quiet:
            print("")

    if processes:
        if not options.quiet:
            print("Waiting for %s builds to complete." % len(processes))
        for process in processes:
            process.wait()


if __name__ == "__main__":
    main()
