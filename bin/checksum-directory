#! /usr/bin/python

# Copyright (C) 2012 Canonical Ltd.
# Author: Colin Watson <cjwatson@ubuntu.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""Checksum all the files in a directory."""

from optparse import OptionParser
import os
import subprocess
import sys

sys.path.insert(0, os.path.join(sys.path[0], os.pardir, "lib"))
from cdimage.checksums import ChecksumFileSet
from cdimage.config import config


def want_image(image):
    """Return true if and only if we want to checksum this image."""
    if (image.endswith(".img") or
        image.endswith(".iso") or
        image.endswith(".exe") or
        image.endswith(".img.gz") or
        "vmlinuz-" in image):
        return True
    else:
        return False


def apply_sed(text, expression):
    """Run TEXT through EXPRESSION using sed.

    A pure Python approach would be better, but this saves on parsing effort
    for now.
    """
    sed = subprocess.Popen(
        ["sed", expression], stdin=subprocess.PIPE, stdout=subprocess.PIPE,
        universal_newlines=True)
    try:
        sed.stdin.write(text)
        return sed.stdout.read()
    finally:
        sed.wait()


def main():
    parser = OptionParser("%prog [options] DIR [OLD_DIR ...]")
    parser.add_option(
        "--map", metavar="s/REGEXP/REPLACEMENT/",
        help="apply s/// expression to old entries to find matching checksum")
    options, args = parser.parse_args()
    if len(args) < 1:
        parser.error("need directory")
    directory = args[0]

    # We don't want to read the existing checksum files directly, as they
    # may contain stale checksums; so we don't use the context manager form
    # here.
    checksum_files = ChecksumFileSet(config, directory)
    images = sorted(name for name in os.listdir(directory) if want_image(name))
    for image in images:
        image_names = [image]
        if options.map:
            image_names.append(apply_sed(image, options.map))
        checksum_files.merge(args, image, image_names)
    checksum_files.add(image)
    checksum_files.write()


if __name__ == "__main__":
    main()
